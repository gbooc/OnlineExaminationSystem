using System;
using System.Collections.Generic;
using System.DirectoryServices.AccountManagement;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;
using webproject.DAL.DB;
using webproject.DAL.Repositories;
using webproject.Models;

namespace webproject.Controllers
{
    public class HomeController : Controller
    {
        #region  Global Initialization | Repository

        private IEmployeeRepository repo_employee;
        private IQuestionaireRepository _questionaire;
        private IExaminationsRepository _exams;
        private ICategoryRepository _category;
        private IUniqueCodesRepository _codes;

        // tables
        tbl_questionnaire _tblques = new tbl_questionnaire();
        tbl_examinations _tblExams = new tbl_examinations();
        tbl_category _tblcategory = new tbl_category();
        tbl_unique_codes tbl_codes = new tbl_unique_codes();

        public static string _username;
        public static string _userid;
        public static string _department;

        public HomeController()
        {
            this.repo_employee = new EmployeeRepository(new OESEntities());
            this._questionaire = new QuestionaireRepository(new OESEntities());
            this._category = new CategoryRepository(new OESEntities());
            this._exams = new ExaminationsRepository(new OESEntities());
            this._codes = new UniqueCodesRepository(new OESEntities());
        }
        public HomeController(IEmployeeRepository repo, IQuestionaireRepository questionnaire, ICategoryRepository category, IExaminationsRepository exams, IUniqueCodesRepository codes)
        {
            this.repo_employee = repo;
            this._questionaire = questionnaire;
            this._category = category;
            this._exams = exams;
            this._codes = codes;
        }
        #endregion

        #region Login/Logout / Password / Search
        public ActionResult Index()
        {
            if (HttpContext.User.Identity.Name == null || HttpContext.User.Identity.Name == "")
            {
                return View();
            }

            return RedirectToAction("Dashboard", "Dashboard");
        }

        [HttpPost]
        public ActionResult Index(UserDetails model)
        {

            if (model.EmployeID != null && model.Password != null) // go to dashboard
            {
                var empID = model.EmployeID.Insert(3, "-");

                var employees = (from a in repo_employee.GetEmployees()
                                 where a.emp_id.Contains(empID)
                                 select a).FirstOrDefault();

                if (employees != null)
                {

                    using (var context = new PrincipalContext(ContextType.Domain, "pri.local"))
                    {
                        bool isValid = context.ValidateCredentials(model.EmployeID, model.Password);

                  //      if (isValid)
                     //   {
                            string cleanId = employees.emp_id;

                            var image = "http://kpsmsvm:90/Content/images/" + cleanId.Substring(1, cleanId.Length - 1).Trim() + ".bmp";

                            FormsAuthentication.SetAuthCookie(employees.fullname, false);

                            Response.Cookies.Add(new HttpCookie("Fullname", employees.fullname));
                            Response.Cookies.Add(new HttpCookie("EmpID", employees.emp_id));
                            Response.Cookies.Add(new HttpCookie("Department", employees.department));
                            Response.Cookies.Add(new HttpCookie("UserRights", employees.user_rights));
                            Response.Cookies.Add(new HttpCookie("Image", image));

                            return JavaScript("Success();");
                     //   }
                    }
                }
                else
                    return JavaScript("Fail();");               
            }
            else // go to autogenerated view
            {
                var codes = (from a in _codes.GetCodes()
                             where a.control_no.Equals(model.ExamCode)
                             select a).FirstOrDefault();

                if (codes != null)
                {

                    FormsAuthentication.SetAuthCookie(codes.control_no, false);

                    Response.Cookies.Add(new HttpCookie("auto_EmpNo", codes.emp_id));
                    Response.Cookies.Add(new HttpCookie("auto_CntrolNo", codes.control_no));
                    Response.Cookies.Add(new HttpCookie("auto_Fname", codes.fname));
                    Response.Cookies.Add(new HttpCookie("auto_Lname", codes.fname));

                    return JavaScript("Authenticated('" + codes.control_no + "');");
                }
                return JavaScript("NoCode();");
            }
            return JavaScript("Fail();");

        }

        public ActionResult Logout()
        {
            Session.Abandon();
            Response.Cookies.Clear();

            FormsAuthentication.SignOut();
            Session.Abandon();

            // Clear authentication cookie
            HttpCookie rFormsCookie = new HttpCookie(FormsAuthentication.FormsCookieName, "");
            rFormsCookie.Expires = DateTime.Now.AddYears(-1);
            Response.Cookies.Add(rFormsCookie);

            return RedirectToAction("Index");
        }

        public ActionResult Search(string search)
        {
            var id = Request.Cookies["EmpID"].Value.ToString();

            var user = repo_employee.GetEmployees().Where(a => a.emp_id.Trim().Equals(id.Trim())).FirstOrDefault();

            if (user.user_rights.Equals("Fullcontrol"))
            {
                // employee results
                var fc = (from ex in _exams.GetExaminations()
                          join
emp in repo_employee.GetEmployees() on ex.emp_id.Trim() equals emp.emp_id.Trim()
                          join
que in _questionaire.GetQuestionaires() on ex.exam_id equals que.exam_id
                          where que.title.ToLower().Trim().Contains(search.ToLower().Trim()) || emp.fullname.ToLower().Contains(search.ToLower())
                          group ex by new
                          {
                              emp.emp_id,
                              ex.exam_id,
                              que.title,
                              emp.fullname,
                              ex.attempt
                          } into g
                          select new UserSearch
                          {
                              EmpID = g.Key.emp_id,
                              ExamID = g.Key.exam_id,
                              Title = g.Key.title,
                              Fullname = g.Key.fullname != null ? g.Key.fullname : "",
                              Rights = "FC",
                              IsVisitor = "0",
                              Attempt = g.Key.attempt.ToString()
                          }).ToList();

                //exams results
                var exams = (from q in _questionaire.GetQuestionaires()
                             where ((q.examinee.Contains("All Employees") || q.examinee.Contains(id))) && q.title.ToLower().Contains(search.ToLower())
                             group q by new
                             {
                                 q.exam_id,
                                 q.title
                             } into g
                             select new UserSearch
                             {
                                 ExamID = g.Key.exam_id,
                                 Title = g.Key.title,
                                 Rights = "FC",
                                 Fullname = ""
                             }).ToList();

                // Visitor  results
                var ques = (from q in _questionaire.GetQuestionaires()
                            join e in _exams.GetExaminations() on q.exam_id equals e.exam_id
                            join c in _codes.GetCodes() on e.emp_id equals c.emp_id
                            where q.title.ToLower().Contains(search.ToLower())
                            group q by new
                            {
                                c.emp_id,
                                q.exam_id,
                                q.title,
                                c.fname,
                                c.lname
                            } into g
                            select new UserSearch
                            {
                                EmpID = g.Key.emp_id,
                                ExamID = g.Key.exam_id,
                                Title = g.Key.title,
                                Rights = "FC",
                                Fullname = g.Key.fname + " " + g.Key.lname != null ? g.Key.fname + " " + g.Key.lname : "",
                                IsVisitor = "1"
                            }).ToList();

                var empgrp = fc.GroupBy(a => a.Attempt).Select(a => a.FirstOrDefault()).ToList();

                var tmpres = ques.Concat(empgrp);
                var results = tmpres.Concat(exams);

                return View(results.ToList());
            }
            else
            {
                var results = (from q in _questionaire.GetQuestionaires()
                               join e in _exams.GetExaminations() on q.exam_id equals e.exam_id
                               where ((q.examinee.Contains("All Employees") || q.examinee.Contains(id))) && q.title.ToLower().Contains(search.ToLower())
                               group q by new
                               {
                                   q.exam_id,
                                   q.title
                               } into g
                               select new UserSearch
                               {
                                   ExamID = g.Key.exam_id,
                                   Title = g.Key.title,
                                   Rights = ""
                               }).ToList();
                return View(results);
            }
        }

        #endregion
    }
}